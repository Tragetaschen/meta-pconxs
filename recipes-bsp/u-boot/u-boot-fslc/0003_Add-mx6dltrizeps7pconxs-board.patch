diff --git a/board/freescale/mx6dltrizeps7pconxs/Makefile b/board/freescale/mx6dltrizeps7pconxs/Makefile
new file mode 100644
index 0000000..30a80ba
--- /dev/null
+++ b/board/freescale/mx6dltrizeps7pconxs/Makefile
@@ -0,0 +1,9 @@
+#
+# Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
+#
+# (C) Copyright 2011 Freescale Semiconductor, Inc.
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y  := mx6dltrizeps7pconxs.o trizeps7sdl_IomuxConfig.o
diff --git a/board/freescale/mx6dltrizeps7pconxs/imximage.cfg b/board/freescale/mx6dltrizeps7pconxs/imximage.cfg
new file mode 100644
index 0000000..e6a3ced
--- /dev/null
+++ b/board/freescale/mx6dltrizeps7pconxs/imximage.cfg
@@ -0,0 +1,70 @@
+IMAGE_VERSION	2
+BOOT_OFFSET	0x400
+DATA 4 0x020e0774 0x000C0000
+DATA 4 0x020e0754 0x00000000
+DATA 4 0x020e04ac 0x00000030
+DATA 4 0x020e04b0 0x00000030
+DATA 4 0x020e0464 0x00000030
+DATA 4 0x020e0490 0x00000030
+DATA 4 0x020e074c 0x00000030
+DATA 4 0x020e0494 0x00000030
+DATA 4 0x020e04a0 0x00000000
+DATA 4 0x020e04b4 0x00000030
+DATA 4 0x020e04b8 0x00000030
+DATA 4 0x020e076c 0x00000030
+DATA 4 0x020e0750 0x00020000
+DATA 4 0x020e04bc 0x00000030
+DATA 4 0x020e04c0 0x00000030
+DATA 4 0x020e04c4 0x00000030
+DATA 4 0x020e04c8 0x00000030
+DATA 4 0x020e0760 0x00020000
+DATA 4 0x020e0764 0x00000030
+DATA 4 0x020e0770 0x00000030
+DATA 4 0x020e0778 0x00000030
+DATA 4 0x020e077c 0x00000030
+DATA 4 0x020e0470 0x00000030
+DATA 4 0x020e0474 0x00000030
+DATA 4 0x020e0478 0x00000030
+DATA 4 0x020e047c 0x00000030
+DATA 4 0x021b0800 0xA1390003
+DATA 4 0x021b080c 0x001F001F
+DATA 4 0x021b0810 0x001F001F
+DATA 4 0x021b083c 0x42190219	
+DATA 4 0x021b0840 0x017B0177	
+DATA 4 0x021b0848 0x4B4D4E4D	
+DATA 4 0x021b0850 0x3F3E2D36	
+DATA 4 0x021b081c 0x33333333
+DATA 4 0x021b0820 0x33333333
+DATA 4 0x021b0824 0x33333333
+DATA 4 0x021b0828 0x33333333
+DATA 4 0x021b08b8 0x00000800
+DATA 4 0x021b0004 0x0002002D
+DATA 4 0x021b0008 0x09443940	
+DATA 4 0x021b000c 0x676B5334
+DATA 4 0x021b0010 0xFF538E64
+DATA 4 0x021b0014 0x01FF00DB
+DATA 4 0x021b0018 0x00001740		
+DATA 4 0x021b001c 0x00008000
+DATA 4 0x021b002c 0x000026d2
+DATA 4 0x021b0030 0x005B0E21
+DATA 4 0x021b0040 0x0000007F
+DATA 4 0x021b0000 0x84190000
+DATA 4 0x021b001c 0x04088032
+DATA 4 0x021b001c 0x00008033
+DATA 4 0x021b001c 0x00428031
+DATA 4 0x021b001c 0x09308030
+DATA 4 0x021b001c 0x04008040
+DATA 4 0x021b0020 0x00005800
+DATA 4 0x021b0818 0x00022227	
+DATA 4 0x021b0004 0x0003556E /* Fehlt im Wince BL .... */
+DATA 4 0x021b0404 0x00011006
+DATA 4 0x021b001c 0x00000000
+/* Restore the default values in the Gate registers. This enables all clocks. Disable some to save power */
+DATA 4 0x020c4068 0xFFFFFFFF
+DATA 4 0x020c406c 0xFFFFFFFF
+DATA 4 0x020c4070 0xFFFFFFFF
+DATA 4 0x020c4074 0xFFFFFFFF
+DATA 4 0x020c4078 0xFFFFFFFF
+DATA 4 0x020c407c 0xFFFFFFFF
+DATA 4 0x020c4080 0xFFFFFFFF
+DATA 4 0x020c4084 0xFFFFFFFF
diff --git a/board/freescale/mx6dltrizeps7pconxs/mx6dltrizeps7pconxs.c b/board/freescale/mx6dltrizeps7pconxs/mx6dltrizeps7pconxs.c
new file mode 100644
index 0000000..8421a3c
--- /dev/null
+++ b/board/freescale/mx6dltrizeps7pconxs/mx6dltrizeps7pconxs.c
@@ -0,0 +1,679 @@
+/*
+ * Copyright (C) 2012 Freescale Semiconductor, Inc.
+ *
+ * Author: Fabio Estevam <fabio.estevam@freescale.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/mx6-pins.h>
+#include <asm/errno.h>
+#include <asm/gpio.h>
+#include <asm/imx-common/iomux-v3.h>
+#include <asm/imx-common/mxc_i2c.h>
+#include <asm/imx-common/boot_mode.h>
+#include <asm/imx-common/video.h>
+#include <mmc.h>
+#include <fsl_esdhc.h>
+#include <miiphy.h>
+#include <netdev.h>
+#include <asm/arch/sys_proto.h>
+#include <i2c.h>
+#include <asm/arch/crm_regs.h>
+
+#include <linux/fb.h>
+#include "../drivers/video/mxcfb.h"
+#include <ipu_pixfmt.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define CLKCTL_CCGR2 0x70
+
+static u32 system_rev;
+
+static void display_init(void);
+static void usbotg_init(void);
+
+#ifdef CONFIG_CMD_I2C
+static void setup_iomux_i2c(unsigned int);
+#endif
+#ifdef CONFIG_FEC_MXC
+static void setup_iomux_enet(void);
+extern void trizeps7sdl_IomuxConfig(void);
+#endif
+static void setup_iomux_asrc(void);
+static void setup_iomux_audmux(void);
+static void setup_iomux_flexcan(void);
+static void setup_iomux_gpio(void);
+static void setup_iomux_hdmi(void);
+#ifdef CONFIG_VIDEO_IPUV3
+static void setup_iomux_ipu1(void);
+#endif
+static void setup_iomux_mlb(void);
+static void setup_iomux_pwm(void);
+static void setup_iomux_weim(void);
+
+
+#ifdef CONFIG_VIDEO_IPUV3
+static void enable_lvds(struct display_info_t const* dev);
+#endif
+
+int dram_init(void)
+{
+	gd->ram_size = get_ram_size((void *)PHYS_SDRAM, PHYS_SDRAM_SIZE);
+	return 0;
+}
+
+#define UART_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const uart1_pads[] = {
+	MX6_PAD_SD3_DAT7__UART1_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_DAT6__UART1_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_DAT0__UART1_CTS_B | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_DAT1__UART1_RTS_B | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+iomux_v3_cfg_t const uart2_pads[] = {
+	MX6_PAD_SD3_DAT5__UART2_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_DAT4__UART2_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_CMD__UART2_CTS_B | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_SD3_CLK__UART2_RTS_B | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+iomux_v3_cfg_t const uart4_pads[] = {
+	MX6_PAD_KEY_COL0__UART4_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_KEY_ROW0__UART4_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+static void setup_iomux_uart(void)
+{
+	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
+	imx_iomux_v3_setup_multiple_pads(uart2_pads, ARRAY_SIZE(uart2_pads));
+	imx_iomux_v3_setup_multiple_pads(uart4_pads, ARRAY_SIZE(uart4_pads));
+}
+
+#ifdef CONFIG_FSL_ESDHC
+
+#define USDHC_PAD_CTRL (\
+	PAD_CTL_PUS_47K_UP | \
+	PAD_CTL_SPEED_LOW | \
+	PAD_CTL_DSE_80ohm | \
+	PAD_CTL_SRE_FAST  | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const usdhc2_pads[] = {
+	MX6_PAD_SD2_CLK__SD2_CLK	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD2_CMD__SD2_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD2_DAT0__SD2_DATA0	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD2_DAT1__SD2_DATA1	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD2_DAT2__SD2_DATA2	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD2_DAT3__SD2_DATA3	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_GPIO_4__GPIO1_IO04	| MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+
+iomux_v3_cfg_t const usdhc4_pads[] = {
+	MX6_PAD_SD4_CLK__SD4_CLK	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_CMD__SD4_CMD	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT0__SD4_DATA0	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT1__SD4_DATA1	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT2__SD4_DATA2	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT3__SD4_DATA3	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT4__SD4_DATA4	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT5__SD4_DATA5	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT6__SD4_DATA6	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD4_DAT7__SD4_DATA7	| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_NANDF_ALE__SD4_RESET	| MUX_PAD_CTRL(USDHC_PAD_CTRL)
+};
+
+struct fsl_esdhc_cfg usdhc_cfg[3] = {
+	{USDHC4_BASE_ADDR},
+	{USDHC2_BASE_ADDR},
+};
+
+int board_mmc_init(bd_t *bis)
+{
+	s32 status = 0;
+	u32 index = 0;
+
+	usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC4_CLK);
+	usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC2_CLK);
+
+	for(index = 0; index < CONFIG_SYS_FSL_USDHC_NUM; ++index) {
+		switch (index) {
+			case 0:
+#define USDHC2_CD IMX_GPIO_NR(1, 4)
+				gpio_direction_input(USDHC2_CD);
+				imx_iomux_v3_setup_multiple_pads(usdhc2_pads, ARRAY_SIZE(usdhc2_pads));
+				break;	
+			case 1:
+				imx_iomux_v3_setup_multiple_pads(usdhc4_pads, ARRAY_SIZE(usdhc4_pads));
+				break;	
+			default:
+				printf("Warning: you configured more USDHC controllers"
+				       "(%d) than supported by the board (%d)\n",
+				       index + 1, CONFIG_SYS_FSL_USDHC_NUM);
+				return status;
+		}
+		
+		status |= fsl_esdhc_initialize(bis, &usdhc_cfg[index]);
+	}
+	return status;
+}
+#endif
+
+#if defined(CONFIG_FEC_MXC)
+int board_eth_init(bd_t *bis)
+{
+	struct iomuxc_base_regs *const iomuxc_regs = (struct iomuxc_base_regs *)IOMUXC_BASE_ADDR;
+	enable_fec_anatop_clock(ENET_50MHz);
+	setbits_le32(&iomuxc_regs->gpr[1], IOMUXC_GPR1_ENET_CLK_SEL_MASK);
+	setup_iomux_enet();
+	return cpu_eth_init(bis);
+}
+#endif
+
+u32 get_board_rev(void)
+{
+	system_rev = 0x63000;
+	return system_rev;
+}
+
+static void display_init(void)
+{
+	imx_iomux_v3_setup_pad(MX6_PAD_DI0_PIN4__GPIO4_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL));
+	imx_iomux_v3_setup_pad(MX6_PAD_CSI0_DATA_EN__GPIO5_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL));
+
+#ifndef CONFIG_VIDEO_IPUV3
+#define IPAN5_BACKLIGHT_ENABLE IMX_GPIO_NR(4, 20)
+#define IPAN5_DISPLAY_POWER IMX_GPIO_NR(5, 20)
+	gpio_direction_output(IPAN5_DISPLAY_POWER, 0);
+	gpio_direction_output(IPAN5_BACKLIGHT_ENABLE, 0);
+#endif
+}
+
+int board_early_init_f(void)
+{
+	setup_iomux_asrc();
+	setup_iomux_audmux();
+	setup_iomux_flexcan();
+	setup_iomux_gpio();
+	setup_iomux_hdmi();
+#ifdef CONFIG_VIDEO_IPUV3
+	setup_iomux_ipu1();
+#endif
+	setup_iomux_mlb();
+	setup_iomux_pwm();
+	setup_iomux_weim();
+	setup_iomux_uart();
+#ifdef CONFIG_CMD_I2C
+	setup_iomux_i2c(I2C1_BASE_ADDR);
+	setup_iomux_i2c(I2C2_BASE_ADDR);
+#endif
+	usbotg_init();
+	display_init();
+	return 0;
+}
+
+static void usbotg_init(void) {
+#define USB_OTG_OC IMX_GPIO_NR(6, 10)
+	gpio_direction_output(USB_OTG_OC, 1);
+}
+
+int board_init(void)
+{
+	gd->bd->bi_arch_number = CONFIG_MACH_TYPE;
+	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
+	return 0;
+}
+
+#ifdef CONFIG_CMD_BMODE
+static const struct boot_mode board_boot_modes[] = {
+	/* 4 bit bus width */
+	{"esdhc2", MAKE_CFGVAL(0x40, 0x28, 0x00, 0x00)},
+	{NULL,   0},
+};
+#endif
+
+int board_late_init(void)
+{
+#ifdef CONFIG_CMD_BMODE
+	add_board_boot_modes(board_boot_modes);
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_FEC_MXC
+
+#define ENET_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t enet_pads[] = {
+	MX6_PAD_ENET_MDIO__ENET_MDIO | MUX_PAD_CTRL(ENET_PAD_CTRL),                   /*                 GP1_22 */
+	MX6_PAD_ENET_MDC__ENET_MDC | MUX_PAD_CTRL(ENET_PAD_CTRL),                     /*                 GP1_31 */
+	MX6_PAD_EIM_BCLK__GPIO6_IO31 | MUX_PAD_CTRL(NO_PAD_CTRL),                    /* /RESET          GP6_31 */
+	MX6_PAD_ENET_RXD0__GPIO1_IO27 | MUX_PAD_CTRL(NO_PAD_CTRL),                   /* MODE0=RXD0      GP1_27 */
+	MX6_PAD_ENET_RXD1__GPIO1_IO26 | MUX_PAD_CTRL(NO_PAD_CTRL),                   /* MODE1=RXD1      GP1_26 */
+	MX6_PAD_ENET_CRS_DV__GPIO1_IO25 | MUX_PAD_CTRL(NO_PAD_CTRL),                 /* MODE2=CSR_DV    GP1_25 */
+	MX6_PAD_ENET_RX_ER__GPIO1_IO24 | MUX_PAD_CTRL(NO_PAD_CTRL),                  /* PHYAD0          GP1_24 */
+	MX6_PAD_ENET_TX_EN__ENET_TX_EN | MUX_PAD_CTRL(NO_PAD_CTRL),                 /* TX_EN           GP1_28 */ 
+	MX6_PAD_ENET_TXD1__ENET_TX_DATA1 | MUX_PAD_CTRL(NO_PAD_CTRL),                /* TXD1            GP1_29 */
+	MX6_PAD_ENET_TXD0__ENET_TX_DATA0 | MUX_PAD_CTRL(NO_PAD_CTRL),                /* TXD0            GP1_30 */
+	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL | MUX_PAD_CTRL(ENET_PAD_CTRL),        /* REFCTRL         GP6_26 */
+	MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(NO_PAD_CTRL),                     /* GP17 \ENET1_INT GP7_12 */
+};
+
+iomux_v3_cfg_t enet_pads_final[] = {
+	MX6_PAD_ENET_RXD0__ENET_RX_DATA0 | MUX_PAD_CTRL(NO_PAD_CTRL),                /* MODE0=RXD0      GP1_27 */
+	MX6_PAD_ENET_RXD1__ENET_RX_DATA1 | MUX_PAD_CTRL(NO_PAD_CTRL),                /* MODE1=RXD1      GP1_26 */
+	MX6_PAD_ENET_CRS_DV__ENET_RX_EN | MUX_PAD_CTRL(NO_PAD_CTRL),                /* MODE2=CSR_DV    GP1_25 */
+	MX6_PAD_ENET_RX_ER__ENET_RX_ER | MUX_PAD_CTRL(NO_PAD_CTRL),                 /* PHYAD0          GP1_24 */
+	MX6_PAD_EIM_BCLK__GPIO6_IO31 | MUX_PAD_CTRL(NO_PAD_CTRL),                    /* VK. /RESET GP6_31 */
+};
+
+int mx6_rgmii_rework(char *devname, int phy_addr)
+{
+	return 0;
+}
+
+static void setup_iomux_enet(void)
+{
+	trizeps7sdl_IomuxConfig();
+	imx_iomux_v3_setup_pad(MX6_PAD_GPIO_16__ENET_REF_CLK | MUX_PAD_CTRL(0xE1));
+
+	imx_iomux_v3_setup_pad(NEW_PAD_CTRL(MX6_PAD_EIM_BCLK__GPIO6_IO31, 0x48));
+#define ENET_RESET IMX_GPIO_NR(6, 31)
+	gpio_direction_output(ENET_RESET, 1);
+	gpio_direction_output(IMX_GPIO_NR(1, 24), 0); // PHY ADR=0
+	gpio_direction_output(IMX_GPIO_NR(1, 25), 1); // Mode 0
+	gpio_direction_output(IMX_GPIO_NR(1, 26), 1); // Mode 1
+	gpio_direction_output(IMX_GPIO_NR(1, 27), 1); // Mode 2
+	gpio_direction_output(ENET_RESET, 0);
+	gpio_direction_output(IMX_GPIO_NR(7, 12), 1);
+	udelay(50);
+	gpio_direction_output(ENET_RESET, 1);
+	udelay(10);
+	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
+	udelay(500);
+	imx_iomux_v3_setup_multiple_pads(enet_pads_final, ARRAY_SIZE(enet_pads_final));
+	gpio_direction_input(IMX_GPIO_NR(7, 12));
+}
+
+#endif
+
+#ifdef CONFIG_CMD_I2C
+
+#define I2C_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_HYS | \
+	PAD_CTL_ODE | \
+	PAD_CTL_SRE_FAST \
+)
+
+static void setup_iomux_i2c(unsigned int module_base) {
+	switch (module_base) {
+		case I2C1_BASE_ADDR:
+			imx_iomux_v3_setup_pad(MX6_PAD_CSI0_DAT8__I2C1_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL));
+			imx_iomux_v3_setup_pad(MX6_PAD_CSI0_DAT9__I2C1_SCL | MUX_PAD_CTRL(I2C_PAD_CTRL));
+			break;
+		case I2C2_BASE_ADDR:
+			imx_iomux_v3_setup_pad(MX6_PAD_KEY_ROW3__I2C2_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL));
+			imx_iomux_v3_setup_pad(MX6_PAD_KEY_COL3__I2C2_SCL | MUX_PAD_CTRL(I2C_PAD_CTRL));
+			break;
+		default:
+			break;
+	}
+}
+#endif
+
+int checkboard(void)
+{
+	printf("Board: MX6DL-TRIZEPS7\n");
+	return 0;
+}
+
+#if defined(CONFIG_VIDEO_IPUV3)
+int display_count = 1;
+struct display_info_t const displays[] = {{
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect = NULL,
+	.enable = &enable_lvds,
+	.mode	= {
+		.name		= "EDT-WVGA",
+		.refresh	= 60,
+		.xres		= 800,
+		.yres		= 480,
+		.pixclock	= 30000,
+		.left_margin	= 40,
+		.right_margin	= 40,
+		.upper_margin	= 29, /* fixed */
+		.lower_margin	= 13,
+		.hsync_len	= 48, /* hsync_len + right_margin == 88 */
+		.vsync_len	= 3,
+		.sync		= 0,
+		.vmode		= FB_VMODE_NONINTERLACED | FB_SYNC_SWAP_RGB,
+		.flag		= 0
+	}
+}};
+
+static void enable_lvds(struct display_info_t const *dev)
+{
+	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
+	u32 reg = readl(&iomux->gpr[2]);
+	reg |= IOMUXC_GPR2_DATA_WIDTH_CH0_18BIT | IOMUXC_GPR2_DATA_WIDTH_CH1_18BIT;
+	writel(reg, &iomux->gpr[2]);
+}
+
+#endif
+
+int overwrite_console(void)
+{
+	return 1;
+}
+
+#define ASRC_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+static void setup_iomux_asrc() {
+	imx_iomux_v3_setup_pad(MX6_PAD_GPIO_0__ASRC_EXT_CLK | MUX_PAD_CTRL(ASRC_PAD_CTRL));
+}
+
+#define AUDMUX_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const audmux_pads[] = {
+	MX6_PAD_CSI0_DAT7__AUD3_RXD | MUX_PAD_CTRL(AUDMUX_PAD_CTRL),
+	MX6_PAD_CSI0_DAT5__AUD3_TXD | MUX_PAD_CTRL(AUDMUX_PAD_CTRL),
+	MX6_PAD_CSI0_DAT6__AUD3_TXFS | MUX_PAD_CTRL(AUDMUX_PAD_CTRL)
+};
+
+static void setup_iomux_audmux() {
+	imx_iomux_v3_setup_multiple_pads(audmux_pads, ARRAY_SIZE(audmux_pads));
+}
+
+#define FLEXCAN_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const flexcan1_pads[] = {
+	MX6_PAD_GPIO_8__FLEXCAN1_RX |MUX_PAD_CTRL(FLEXCAN_PAD_CTRL),
+	MX6_PAD_GPIO_7__FLEXCAN1_TX |MUX_PAD_CTRL(FLEXCAN_PAD_CTRL),
+};
+
+iomux_v3_cfg_t const flexcan2_pads[] = {
+	MX6_PAD_KEY_ROW4__FLEXCAN2_RX |MUX_PAD_CTRL(FLEXCAN_PAD_CTRL),
+	MX6_PAD_KEY_COL4__FLEXCAN2_TX |MUX_PAD_CTRL(FLEXCAN_PAD_CTRL),
+};
+
+static void setup_iomux_flexcan() {
+	imx_iomux_v3_setup_multiple_pads(flexcan1_pads, ARRAY_SIZE(flexcan1_pads));
+	imx_iomux_v3_setup_multiple_pads(flexcan2_pads, ARRAY_SIZE(flexcan2_pads));
+}
+
+#define GPIO_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const gpio_pads[] = {
+	MX6_PAD_GPIO_5__GPIO1_IO05 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+
+	MX6_PAD_NANDF_D0__GPIO2_IO00 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D1__GPIO2_IO01 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D2__GPIO2_IO02 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D3__GPIO2_IO03 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D4__GPIO2_IO04 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D5__GPIO2_IO05 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D6__GPIO2_IO06 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_D7__GPIO2_IO07 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_EIM_LBA__GPIO2_IO27 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+
+	MX6_PAD_GPIO_19__GPIO4_IO05 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_KEY_COL1__GPIO4_IO08 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_KEY_ROW1__GPIO4_IO09 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_KEY_COL2__GPIO4_IO10 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+
+	MX6_PAD_CSI0_DATA_EN__GPIO5_IO20 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_CSI0_DAT10__GPIO5_IO28 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_CSI0_DAT11__GPIO5_IO29 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+
+	MX6_PAD_NANDF_CLE__GPIO6_IO07 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_WP_B__GPIO6_IO09 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_RB0__GPIO6_IO10 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_CS0__GPIO6_IO11 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_CS1__GPIO6_IO14 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_CS2__GPIO6_IO15 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_NANDF_CS3__GPIO6_IO16 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_EIM_BCLK__GPIO6_IO31 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+
+	MX6_PAD_SD3_DAT2__GPIO7_IO06 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_SD3_DAT3__GPIO7_IO07 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_SD3_RST__GPIO7_IO08 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_GPIO_16__GPIO7_IO11 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+	MX6_PAD_GPIO_18__GPIO7_IO13 | MUX_PAD_CTRL(GPIO_PAD_CTRL),
+};
+
+static void setup_iomux_gpio() {
+	imx_iomux_v3_setup_multiple_pads(gpio_pads, ARRAY_SIZE(gpio_pads));
+}
+
+#define HDMI_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const hdmi_pads[] = {
+	MX6_PAD_KEY_ROW2__HDMI_TX_CEC_LINE | MUX_PAD_CTRL(HDMI_PAD_CTRL),
+};
+
+static void setup_iomux_hdmi() {
+	imx_iomux_v3_setup_multiple_pads(hdmi_pads, ARRAY_SIZE(hdmi_pads));
+}
+
+#ifdef CONFIG_VIDEO_IPUV3
+
+#define IPU1_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const ipu1_pads[] = {
+
+	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DATA00 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DATA01 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DATA02 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT3__IPU1_DISP0_DATA03 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT4__IPU1_DISP0_DATA04 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT5__IPU1_DISP0_DATA05 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT6__IPU1_DISP0_DATA06 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT7__IPU1_DISP0_DATA07 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT8__IPU1_DISP0_DATA08 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT9__IPU1_DISP0_DATA09 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT10__IPU1_DISP0_DATA10 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT11__IPU1_DISP0_DATA11 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT12__IPU1_DISP0_DATA12 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT13__IPU1_DISP0_DATA13 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT14__IPU1_DISP0_DATA14 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT15__IPU1_DISP0_DATA15 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT16__IPU1_DISP0_DATA16 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT17__IPU1_DISP0_DATA17 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT18__IPU1_DISP0_DATA18 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT19__IPU1_DISP0_DATA19 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT20__IPU1_DISP0_DATA20 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT21__IPU1_DISP0_DATA21 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT22__IPU1_DISP0_DATA22 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DISP0_DAT23__IPU1_DISP0_DATA23 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT12__IPU1_CSI0_DATA12 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT13__IPU1_CSI0_DATA13 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT14__IPU1_CSI0_DATA14 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT15__IPU1_CSI0_DATA15 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT16__IPU1_CSI0_DATA16 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT17__IPU1_CSI0_DATA17 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT18__IPU1_CSI0_DATA18 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_DAT19__IPU1_CSI0_DATA19 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_MCLK__IPU1_CSI0_HSYNC | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_PIXCLK__IPU1_CSI0_PIXCLK | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_CSI0_VSYNC__IPU1_CSI0_VSYNC | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+	MX6_PAD_DI0_PIN4__IPU1_DI0_PIN04 | MUX_PAD_CTRL(IPU1_PAD_CTRL),
+};
+
+static void setup_iomux_ipu1() {
+	imx_iomux_v3_setup_multiple_pads(ipu1_pads, ARRAY_SIZE(ipu1_pads));
+}
+#endif
+#define MLB_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const mlb_pads[] = {
+	MX6_PAD_GPIO_3__MLB_CLK | MUX_PAD_CTRL(MLB_PAD_CTRL),
+	MX6_PAD_GPIO_2__MLB_DATA | MUX_PAD_CTRL(MLB_PAD_CTRL),
+	MX6_PAD_GPIO_6__MLB_SIG | MUX_PAD_CTRL(MLB_PAD_CTRL),
+};
+
+static void setup_iomux_mlb() {
+	imx_iomux_v3_setup_multiple_pads(mlb_pads, ARRAY_SIZE(mlb_pads));
+}
+
+#define PWM_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const pwm_pads[] = {
+	MX6_PAD_GPIO_9__PWM1_OUT | MUX_PAD_CTRL(PWM_PAD_CTRL),
+	MX6_PAD_GPIO_1__PWM2_OUT | MUX_PAD_CTRL(PWM_PAD_CTRL)
+};
+
+static void setup_iomux_pwm() {
+	imx_iomux_v3_setup_multiple_pads(pwm_pads, ARRAY_SIZE(pwm_pads));
+}
+
+#define WEIM_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_FAST | \
+	PAD_CTL_HYS \
+)
+#define WEIM_DATA_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_MED | \
+	PAD_CTL_DSE_40ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+#define WEIM_WAIT_PAD_CTRL (\
+	PAD_CTL_PUS_100K_UP | \
+	PAD_CTL_SPEED_LOW | \
+	PAD_CTL_DSE_60ohm | \
+	PAD_CTL_SRE_SLOW | \
+	PAD_CTL_HYS \
+)
+
+iomux_v3_cfg_t const weim_pads[] = {
+	MX6_PAD_EIM_A16__EIM_ADDR16 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A17__EIM_ADDR17 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A18__EIM_ADDR18 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A19__EIM_ADDR19 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A20__EIM_ADDR20 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A21__EIM_ADDR21 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A22__EIM_ADDR22 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A23__EIM_ADDR23 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A24__EIM_ADDR24 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_A25__EIM_ADDR25 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_CS0__EIM_CS0_B | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_CS1__EIM_CS1_B | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_D16__EIM_DATA16 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D17__EIM_DATA17 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D18__EIM_DATA18 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D19__EIM_DATA19 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D20__EIM_DATA20 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D21__EIM_DATA21 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D22__EIM_DATA22 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D23__EIM_DATA23 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D24__EIM_DATA24 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D25__EIM_DATA25 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D26__EIM_DATA26 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D27__EIM_DATA27 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D28__EIM_DATA28 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D29__EIM_DATA29 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D30__EIM_DATA30 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_D31__EIM_DATA31 | MUX_PAD_CTRL(WEIM_DATA_PAD_CTRL),
+	MX6_PAD_EIM_DA0__EIM_AD00 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA1__EIM_AD01 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA2__EIM_AD02 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA3__EIM_AD03 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA4__EIM_AD04 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA5__EIM_AD05 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA6__EIM_AD06 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA7__EIM_AD07 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA8__EIM_AD08 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA9__EIM_AD09 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA10__EIM_AD10 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA11__EIM_AD11 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA12__EIM_AD12 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA13__EIM_AD13 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA14__EIM_AD14 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_DA15__EIM_AD15 | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_EB0__EIM_EB0_B | MUX_PAD_CTRL(WEIM_PAD_CTRL),
+	MX6_PAD_EIM_WAIT__EIM_WAIT_B | MUX_PAD_CTRL(WEIM_WAIT_PAD_CTRL),
+};
+
+static void setup_iomux_weim() {
+	imx_iomux_v3_setup_multiple_pads(weim_pads, ARRAY_SIZE(weim_pads));
+}
diff --git a/board/freescale/mx6dltrizeps7pconxs/trizeps7sdl_IomuxConfig.c b/board/freescale/mx6dltrizeps7pconxs/trizeps7sdl_IomuxConfig.c
new file mode 100644
index 0000000..6e926ae
--- /dev/null
+++ b/board/freescale/mx6dltrizeps7pconxs/trizeps7sdl_IomuxConfig.c
@@ -0,0 +1,3193 @@
+/*
+ * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved.
+ * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
+ * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
+ * Freescale Semiconductor, Inc.
+*/
+
+// File: iomux_define.h
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/imx-common/iomux-v3.h>
+#include <asm/arch/mx6-pins.h>
+#include <asm/errno.h>
+
+#ifndef _IOMUX_DEFINE_H_
+#define _IOMUX_DEFINE_H_
+
+// IOMUXC_SW_MUX_CTL_PAD_*
+// SION
+#define SION_DISABLED 0x0
+#define SION_ENABLED  0x1
+// MUX_MODE
+#define ALT0 0x0
+#define ALT1 0x1
+#define ALT2 0x2
+#define ALT3 0x3
+#define ALT4 0x4
+#define ALT5 0x5
+#define ALT6 0x6
+#define ALT7 0x7
+#define ALT8 0x8
+#define ALT9 0x9
+
+// IOMUXC_SW_PAD_CTL_PAD_*
+// IOMUXC_SW_PAD_CTL_GRP_*
+// HYS
+#define HYS_DISABLED 0x0
+#define HYS_ENABLED  0x1
+// PUS
+#define PUS_100KOHM_PD 0x0
+#define PUS_47KOHM_PU  0x1
+#define PUS_100KOHM_PU 0x2
+#define PUS_22KOHM_PU  0x3
+// PUE
+#define PUE_KEEP 0x0
+#define PUE_PULL 0x1
+// PKE
+#define PKE_DISABLED 0x0
+#define PKE_ENABLED  0x1
+// ODE
+#define ODE_DISABLED 0x0
+#define ODE_ENABLED  0x1
+// SPEED
+#define SPD_TBD    0x0
+#define SPD_50MHZ  0x1
+#define SPD_100MHZ 0x2
+#define SPD_200MHZ 0x3
+// DSE
+#define DSE_DISABLED 0x0
+#define DSE_240OHM   0x1
+#define DSE_120OHM   0x2
+#define DSE_80OHM    0x3
+#define DSE_60OHM    0x4
+#define DSE_48OHM    0x5
+#define DSE_40OHM    0x6
+#define DSE_34OHM    0x7
+// SRE
+#define SRE_SLOW 0x0
+#define SRE_FAST 0x1
+// ODT
+#define ODT_OFF    0x0
+#define ODT_120OHM 0x1
+#define ODT_60OHM  0x2
+#define ODT_40OHM  0x3
+#define ODT_30OHM  0x4
+#define ODT_RES5   0x5
+#define ODT_20OHM  0x6
+#define ODT_RES7   0x7
+// DDR_INPUT
+#define DDR_INPUT_CMOS 0x0
+#define DDR_INPUT_DIFF 0x1
+// DDR_SEL
+#define DDR_SEL_LPDDR1_DDR3_DDR2_ODT 0x0
+#define DDR_SEL_DDR2                 0x1
+#define DDR_SEL_LPDDR2               0x2
+#define DDR_SEL_RES0                 0x3
+// DO_TRIM
+#define DO_TRIM_RES0 0x0
+#define DO_TRIM_RES1 0x1
+
+// IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RX_ER_ALT0 0x0
+#define SEL_GPIO_1_ALT3     0x1
+
+// IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_0_ALT3   0x0
+#define SEL_GPIO_18_ALT4  0x1
+#define SEL_KEY_ROW3_ALT1 0x2
+
+// IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT23_ALT3 0x0
+#define SEL_SD2_DAT0_ALT3    0x1
+
+// IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT21_ALT3 0x0
+#define SEL_SD2_DAT2_ALT3    0x1
+
+// IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT19_ALT4 0x0
+#define SEL_SD2_CMD_ALT3     0x1
+
+// IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT18_ALT4 0x0
+#define SEL_SD2_CLK_ALT3     0x1
+
+// IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT20_ALT3 0x0
+#define SEL_SD2_DAT3_ALT3    0x1
+
+// IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT22_ALT3 0x0
+#define SEL_SD2_DAT1_ALT3    0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT19_ALT3 0x0
+#define SEL_KEY_ROW1_ALT2    0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT17_ALT3 0x0
+#define SEL_KEY_ROW0_ALT2    0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT14_ALT3 0x0
+#define SEL_EIM_D25_ALT6     0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT13_ALT3 0x0
+#define SEL_EIM_D24_ALT6     0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT16_ALT3 0x0
+#define SEL_KEY_COL0_ALT2    0x1
+
+// IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT18_ALT3 0x0
+#define SEL_KEY_COL1_ALT2    0x1
+
+// IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_8_ALT3   0x0
+#define SEL_KEY_ROW2_ALT2 0x1
+#define SEL_SD3_CLK_ALT2  0x2
+
+// IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT
+// DAISY
+#define SEL_KEY_ROW4_ALT0 0x0
+#define SEL_SD3_DAT1_ALT2 0x1
+
+// IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT
+// DAISY
+#define SEL_EIM_DA13_ALT2 0x0
+#define SEL_EIM_EB2_ALT2  0x1
+
+// IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT
+// DAISY
+#define SEL_EIM_EB0_ALT4 0x0
+#define SEL_GPIO_17_ALT2 0x1
+
+// IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT4_ALT2   0x0
+#define SEL_DISP0_DAT20_ALT2 0x1
+#define SEL_EIM_D16_ALT1     0x2
+#define SEL_KEY_COL0_ALT0    0x3
+
+// IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT6_ALT2   0x0
+#define SEL_DISP0_DAT22_ALT2 0x1
+#define SEL_EIM_D17_ALT1     0x2
+#define SEL_KEY_COL1_ALT0    0x3
+
+// IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT5_ALT2   0x0
+#define SEL_DISP0_DAT21_ALT2 0x1
+#define SEL_EIM_D18_ALT1     0x2
+#define SEL_KEY_ROW0_ALT0    0x3
+
+// IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT7_ALT2   0x0
+#define SEL_DISP0_DAT23_ALT2 0x1
+#define SEL_EIM_EB2_ALT1     0x2
+#define SEL_KEY_ROW1_ALT0    0x3
+
+// IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT15_ALT2 0x0
+#define SEL_EIM_D19_ALT1     0x1
+#define SEL_KEY_COL2_ALT0    0x2
+
+// IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D24_ALT3  0x0
+#define SEL_KEY_ROW2_ALT0 0x1
+
+// IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D25_ALT3  0x0
+#define SEL_KEY_COL3_ALT0 0x1
+
+// IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT8_ALT2   0x0
+#define SEL_DISP0_DAT19_ALT2 0x1
+#define SEL_EIM_CS0_ALT2     0x2
+
+// IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT10_ALT2  0x0
+#define SEL_DISP0_DAT17_ALT2 0x1
+#define SEL_EIM_OE_ALT2      0x2
+
+// IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT9_ALT2   0x0
+#define SEL_DISP0_DAT16_ALT2 0x1
+#define SEL_EIM_CS1_ALT2     0x2
+
+// IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT11_ALT2  0x0
+#define SEL_DISP0_DAT18_ALT2 0x1
+#define SEL_EIM_RW_ALT2      0x2
+
+// IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT15_ALT3 0x0
+#define SEL_EIM_LBA_ALT2     0x1
+
+// IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D20_ALT1 0x0
+#define SEL_EIM_D29_ALT2 0x1
+
+// IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_16_ALT2      0x0
+#define SEL_RGMII_TX_CTL_ALT7 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT
+// DAISY
+#define SEL_ENET_MDIO_ALT1 0x0
+#define SEL_KEY_COL1_ALT1  0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_18_ALT1   0x0
+#define SEL_RGMII_RXC_ALT1 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RXD0_ALT1 0x0
+#define SEL_RGMII_RD0_ALT1 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RXD1_ALT1 0x0
+#define SEL_RGMII_RD1_ALT1 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT
+// DAISY
+#define SEL_KEY_COL2_ALT1  0x0
+#define SEL_RGMII_RD2_ALT1 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT
+// DAISY
+#define SEL_KEY_COL0_ALT1  0x0
+#define SEL_RGMII_RD3_ALT1 0x1
+
+// IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_CRS_DV_ALT1  0x0
+#define SEL_RGMII_RX_CTL_ALT1 0x1
+
+// IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT
+// DAISY
+#define SEL_ENET_REF_CLK_ALT2 0x0
+#define SEL_GPIO_9_ALT0       0x1
+
+// IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RXD1_ALT2 0x0
+#define SEL_GPIO_2_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RX_ER_ALT2 0x0
+#define SEL_GPIO_3_ALT0     0x1
+
+// IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RXD0_ALT2 0x0
+#define SEL_GPIO_4_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT
+// DAISY
+#define SEL_ENET_MDIO_ALT2 0x0
+#define SEL_GPIO_1_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT
+// DAISY
+#define SEL_ENET_CRS_DV_ALT2 0x0
+#define SEL_GPIO_6_ALT0      0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_17_ALT0   0x0
+#define SEL_NANDF_CS2_ALT2 0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT
+// DAISY
+#define SEL_GPIO_18_ALT0   0x0
+#define SEL_NANDF_CS3_ALT2 0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TXD1_ALT2 0x0
+#define SEL_GPIO_5_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TX_EN_ALT2 0x0
+#define SEL_GPIO_16_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TXD0_ALT2 0x0
+#define SEL_GPIO_7_ALT0    0x1
+
+// IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT
+// DAISY
+#define SEL_ENET_MDC_ALT2 0x0
+#define SEL_GPIO_8_ALT0   0x1
+
+// IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A25_ALT6  0x0
+#define SEL_KEY_ROW2_ALT6 0x1
+
+// IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_EB2_ALT4  0x0
+#define SEL_KEY_COL3_ALT2 0x1
+
+// IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D16_ALT4  0x0
+#define SEL_KEY_ROW3_ALT2 0x1
+
+// IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT9_ALT4 0x0
+#define SEL_EIM_D21_ALT6   0x1
+
+// IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT8_ALT4 0x0
+#define SEL_EIM_D28_ALT1   0x1
+
+// IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_EB2_ALT6  0x0
+#define SEL_KEY_COL3_ALT4 0x1
+
+// IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D16_ALT6  0x0
+#define SEL_KEY_ROW3_ALT4 0x1
+
+// IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D17_ALT6 0x0
+#define SEL_GPIO_3_ALT2  0x1
+#define SEL_GPIO_5_ALT6  0x2
+
+// IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D18_ALT6 0x0
+#define SEL_GPIO_16_ALT6 0x1
+#define SEL_GPIO_6_ALT2  0x2
+
+// IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TX_EN_ALT9 0x0
+#define SEL_GPIO_7_ALT8     0x1
+#define SEL_NANDF_WP_B_ALT9 0x2
+
+// IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TXD1_ALT9 0x0
+#define SEL_GPIO_8_ALT8    0x1
+#define SEL_NANDF_CS3_ALT9 0x2
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D22_ALT3 0x0
+#define SEL_EIM_EB1_ALT2 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D21_ALT3 0x0
+#define SEL_EIM_EB0_ALT2 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A17_ALT2 0x0
+#define SEL_EIM_D28_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A18_ALT2 0x0
+#define SEL_EIM_D27_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A19_ALT2 0x0
+#define SEL_EIM_D26_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A20_ALT2 0x0
+#define SEL_EIM_D20_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A21_ALT2 0x0
+#define SEL_EIM_D19_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A22_ALT2 0x0
+#define SEL_EIM_D18_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A23_ALT2 0x0
+#define SEL_EIM_D16_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A24_ALT2 0x0
+#define SEL_EIM_EB2_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D23_ALT4  0x0
+#define SEL_EIM_DA10_ALT2 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT
+// DAISY
+#define SEL_EIM_DA11_ALT2 0x0
+#define SEL_EIM_EB3_ALT4  0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT
+// DAISY
+#define SEL_EIM_A16_ALT2 0x0
+#define SEL_EIM_D17_ALT3 0x1
+
+// IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D29_ALT6  0x0
+#define SEL_EIM_DA12_ALT2 0x1
+
+// IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT4_ALT3 0x0
+#define SEL_GPIO_0_ALT2    0x1
+#define SEL_GPIO_19_ALT0   0x2
+#define SEL_SD2_CLK_ALT2   0x3
+
+// IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT6_ALT3 0x0
+#define SEL_GPIO_9_ALT2    0x1
+#define SEL_SD2_DAT3_ALT2  0x2
+
+// IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT8_ALT3 0x0
+#define SEL_GPIO_4_ALT2    0x1
+#define SEL_SD2_DAT1_ALT4  0x2
+
+// IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT5_ALT3 0x0
+#define SEL_GPIO_1_ALT2    0x1
+#define SEL_SD2_CMD_ALT2   0x2
+
+// IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT7_ALT3 0x0
+#define SEL_GPIO_2_ALT2    0x1
+#define SEL_SD2_DAT2_ALT4  0x2
+
+// IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT9_ALT3 0x0
+#define SEL_GPIO_5_ALT2    0x1
+#define SEL_SD2_DAT0_ALT4  0x2
+
+// IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT
+// DAISY
+#define SEL_DI0_PIN2_ALT1 0x0
+#define SEL_DI0_PIN4_ALT1 0x1
+
+// IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_TXD1_ALT0 0x0
+#define SEL_GPIO_3_ALT7    0x1
+
+// IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_MDC_ALT0 0x0
+#define SEL_GPIO_2_ALT7   0x1
+
+// IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT
+// DAISY
+#define SEL_ENET_RXD1_ALT0 0x0
+#define SEL_GPIO_6_ALT7    0x1
+
+// IOMUXC_SDMA_EVENTS_14_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT16_ALT4 0x0
+#define SEL_GPIO_17_ALT3     0x1
+
+// IOMUXC_SDMA_EVENTS_15_SELECT_INPUT
+// DAISY
+#define SEL_DISP0_DAT17_ALT4 0x0
+#define SEL_GPIO_18_ALT3     0x1
+
+// IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D21_ALT7    0x0
+#define SEL_ENET_RX_ER_ALT3 0x1
+#define SEL_GPIO_16_ALT4    0x2
+#define SEL_KEY_COL3_ALT6   0x3
+
+// IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT
+// DAISY
+#define SEL_ENET_CRS_DV_ALT3 0x0
+#define SEL_RGMII_TXC_ALT2   0x1
+
+// IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D19_ALT4  0x0
+#define SEL_EIM_D20_ALT4  0x1
+#define SEL_SD3_DAT0_ALT1 0x2
+#define SEL_SD3_DAT1_ALT1 0x3
+
+// IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT10_ALT3 0x0
+#define SEL_CSI0_DAT11_ALT3 0x1
+#define SEL_SD3_DAT6_ALT1   0x2
+#define SEL_SD3_DAT7_ALT1   0x3
+
+// IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D28_ALT4  0x0
+#define SEL_EIM_D29_ALT4  0x1
+#define SEL_SD3_CLK_ALT1  0x2
+#define SEL_SD3_CMD_ALT1  0x3
+#define SEL_SD4_DAT5_ALT2 0x4
+#define SEL_SD4_DAT6_ALT2 0x5
+
+// IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D26_ALT4  0x0
+#define SEL_EIM_D27_ALT4  0x1
+#define SEL_GPIO_7_ALT4   0x2
+#define SEL_GPIO_8_ALT4   0x3
+#define SEL_SD3_DAT4_ALT1 0x4
+#define SEL_SD3_DAT5_ALT1 0x5
+#define SEL_SD4_DAT4_ALT2 0x6
+#define SEL_SD4_DAT7_ALT2 0x7
+
+// IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D23_ALT2  0x0
+#define SEL_EIM_D30_ALT4  0x1
+#define SEL_EIM_D31_ALT4  0x2
+#define SEL_EIM_EB3_ALT2  0x3
+#define SEL_SD3_DAT3_ALT1 0x4
+#define SEL_SD3_RST_ALT1  0x5
+
+// IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D24_ALT2 0x0
+#define SEL_EIM_D25_ALT2 0x1
+#define SEL_SD4_CLK_ALT2 0x2
+#define SEL_SD4_CMD_ALT2 0x3
+
+// IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT16_ALT3 0x0
+#define SEL_CSI0_DAT17_ALT3 0x1
+
+// IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT12_ALT3 0x0
+#define SEL_CSI0_DAT13_ALT3 0x1
+#define SEL_KEY_COL0_ALT4   0x2
+#define SEL_KEY_ROW0_ALT4   0x3
+
+// IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT18_ALT3 0x0
+#define SEL_CSI0_DAT19_ALT3 0x1
+#define SEL_KEY_COL4_ALT4   0x2
+#define SEL_KEY_ROW4_ALT4   0x3
+
+// IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT
+// DAISY
+#define SEL_CSI0_DAT14_ALT3 0x0
+#define SEL_CSI0_DAT15_ALT3 0x1
+#define SEL_KEY_COL1_ALT4   0x2
+#define SEL_KEY_ROW1_ALT4   0x3
+
+// IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D21_ALT4  0x0
+#define SEL_KEY_COL4_ALT2 0x1
+
+// IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT
+// DAISY
+#define SEL_EIM_D30_ALT6 0x0
+#define SEL_GPIO_3_ALT6  0x1
+
+// IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_NANDF_CS1_ALT8 0x0
+#define SEL_SD1_CLK_ALT0   0x1
+
+// IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT
+// DAISY
+#define SEL_DI0_PIN4_ALT3 0x0
+#define SEL_GPIO_9_ALT6   0x1
+
+// IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_NANDF_CS3_ALT8 0x0
+#define SEL_SD2_CLK_ALT0   0x1
+
+// IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_NANDF_ALE_ALT8 0x0
+#define SEL_SD3_CLK_ALT0   0x1
+
+// IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT
+// DAISY
+#define SEL_NANDF_RB0_ALT8 0x0
+#define SEL_SD4_CLK_ALT0   0x1
+
+
+#endif // _IOMUX_DEFINE_H_
+/*
+ * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved.
+ * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
+ * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
+ * Freescale Semiconductor, Inc.
+*/
+
+// File: iomux_register.h
+
+#ifndef _IOMUX_REGISTER_H_
+#define _IOMUX_REGISTER_H_
+
+//
+// IOMUXC_GPR*
+//
+#define IOMUXC_GPR0        0x020E0000
+#define IOMUXC_GPR1        0x020E0004
+#define IOMUXC_GPR2        0x020E0008
+#define IOMUXC_GPR3        0x020E000C
+#define IOMUXC_GPR4        0x020E0010
+#define IOMUXC_GPR5        0x020E0014
+#define IOMUXC_GPR6        0x020E0018
+#define IOMUXC_GPR7        0x020E001C
+#define IOMUXC_GPR8        0x020E0020
+#define IOMUXC_GPR9        0x020E0024
+#define IOMUXC_GPR10       0x020E0028
+#define IOMUXC_GPR11       0x020E002C
+#define IOMUXC_GPR12       0x020E0030
+#define IOMUXC_GPR13       0x020E0034
+
+//
+// IOMUXC_OBSERVE_MUX_*
+//
+#define IOMUXC_OBSERVE_MUX_0 0x020E0038
+#define IOMUXC_OBSERVE_MUX_1 0x020E003C
+#define IOMUXC_OBSERVE_MUX_2 0x020E0040
+#define IOMUXC_OBSERVE_MUX_3 0x020E0044
+#define IOMUXC_OBSERVE_MUX_4 0x020E0048
+
+//
+// IOMUXC_SW_MUX_CTL_PAD_*
+//
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT10   0x020E004C
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT11   0x020E0050
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT12   0x020E0054
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT13   0x020E0058
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT14   0x020E005C
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT15   0x020E0060
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT16   0x020E0064
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT17   0x020E0068
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT18   0x020E006C
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT19   0x020E0070
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT4    0x020E0074
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT5    0x020E0078
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT6    0x020E007C
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT7    0x020E0080
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT8    0x020E0084
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DAT9    0x020E0088
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_DATA_EN 0x020E008C
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_MCLK    0x020E0090
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_PIXCLK  0x020E0094
+#define IOMUXC_SW_MUX_CTL_PAD_CSI0_VSYNC   0x020E0098
+#define IOMUXC_SW_MUX_CTL_PAD_DI0_DISP_CLK 0x020E009C
+#define IOMUXC_SW_MUX_CTL_PAD_DI0_PIN15    0x020E00A0
+#define IOMUXC_SW_MUX_CTL_PAD_DI0_PIN2     0x020E00A4
+#define IOMUXC_SW_MUX_CTL_PAD_DI0_PIN3     0x020E00A8
+#define IOMUXC_SW_MUX_CTL_PAD_DI0_PIN4     0x020E00AC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT0   0x020E00B0
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT1   0x020E00B4
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT10  0x020E00B8
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT11  0x020E00BC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT12  0x020E00C0
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT13  0x020E00C4
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT14  0x020E00C8
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT15  0x020E00CC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT16  0x020E00D0
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT17  0x020E00D4
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT18  0x020E00D8
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT19  0x020E00DC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT2   0x020E00E0
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT20  0x020E00E4
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT21  0x020E00E8
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT22  0x020E00EC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT23  0x020E00F0
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT3   0x020E00F4
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT4   0x020E00F8
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT5   0x020E00FC
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT6   0x020E0100
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT7   0x020E0104
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT8   0x020E0108
+#define IOMUXC_SW_MUX_CTL_PAD_DISP0_DAT9   0x020E010C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A16      0x020E0110
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A17      0x020E0114
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A18      0x020E0118
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A19      0x020E011C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A20      0x020E0120
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A21      0x020E0124
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A22      0x020E0128
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A23      0x020E012C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A24      0x020E0130
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_A25      0x020E0134
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_BCLK     0x020E0138
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_CS0      0x020E013C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_CS1      0x020E0140
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D16      0x020E0144
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D17      0x020E0148
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D18      0x020E014C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D19      0x020E0150
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D20      0x020E0154
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D21      0x020E0158
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D22      0x020E015C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D23      0x020E0160
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D24      0x020E0164
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D25      0x020E0168
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D26      0x020E016C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D27      0x020E0170
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D28      0x020E0174
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D29      0x020E0178
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D30      0x020E017C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_D31      0x020E0180
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA0      0x020E0184
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA1      0x020E0188
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA10     0x020E018C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA11     0x020E0190
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA12     0x020E0194
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA13     0x020E0198
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA14     0x020E019C
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA15     0x020E01A0
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA2      0x020E01A4
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA3      0x020E01A8
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA4      0x020E01AC
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA5      0x020E01B0
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA6      0x020E01B4
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA7      0x020E01B8
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA8      0x020E01BC
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_DA9      0x020E01C0
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_EB0      0x020E01C4
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_EB1      0x020E01C8
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_EB2      0x020E01CC
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_EB3      0x020E01D0
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_LBA      0x020E01D4
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_OE       0x020E01D8
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_RW       0x020E01DC
+#define IOMUXC_SW_MUX_CTL_PAD_EIM_WAIT     0x020E01E0
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV  0x020E01E4
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDC     0x020E01E8
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO    0x020E01EC
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK 0x020E01F0
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER   0x020E01F4
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0    0x020E01F8
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1    0x020E01FC
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN   0x020E0200
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0    0x020E0204
+#define IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1    0x020E0208
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_0       0x020E020C
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_1       0x020E0210
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_16      0x020E0214
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_17      0x020E0218
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_18      0x020E021C
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_19      0x020E0220
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_2       0x020E0224
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_3       0x020E0228
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_4       0x020E022C
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_5       0x020E0230
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_6       0x020E0234
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_7       0x020E0238
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_8       0x020E023C
+#define IOMUXC_SW_MUX_CTL_PAD_GPIO_9       0x020E0240
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_COL0     0x020E0244
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_COL1     0x020E0248
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_COL2     0x020E024C
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_COL3     0x020E0250
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_COL4     0x020E0254
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0     0x020E0258
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1     0x020E025C
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2     0x020E0260
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3     0x020E0264
+#define IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4     0x020E0268
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_ALE    0x020E026C
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_CLE    0x020E0270
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_CS0    0x020E0274
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_CS1    0x020E0278
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_CS2    0x020E027C
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_CS3    0x020E0280
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D0     0x020E0284
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D1     0x020E0288
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D2     0x020E028C
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D3     0x020E0290
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D4     0x020E0294
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D5     0x020E0298
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D6     0x020E029C
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_D7     0x020E02A0
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_RB0    0x020E02A4
+#define IOMUXC_SW_MUX_CTL_PAD_NANDF_WP_B   0x020E02A8
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0    0x020E02AC
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1    0x020E02B0
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2    0x020E02B4
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3    0x020E02B8
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL 0x020E02BC
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC    0x020E02C0
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0    0x020E02C4
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1    0x020E02C8
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2    0x020E02CC
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3    0x020E02D0
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL 0x020E02D4
+#define IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC    0x020E02D8
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_CLK      0x020E02DC
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_CMD      0x020E02E0
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_DAT0     0x020E02E4
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_DAT1     0x020E02E8
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_DAT2     0x020E02EC
+#define IOMUXC_SW_MUX_CTL_PAD_SD1_DAT3     0x020E02F0
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_CLK      0x020E02F4
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_CMD      0x020E02F8
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_DAT0     0x020E02FC
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_DAT1     0x020E0300
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_DAT2     0x020E0304
+#define IOMUXC_SW_MUX_CTL_PAD_SD2_DAT3     0x020E0308
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_CLK      0x020E030C
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_CMD      0x020E0310
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT0     0x020E0314
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT1     0x020E0318
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT2     0x020E031C
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT3     0x020E0320
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT4     0x020E0324
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT5     0x020E0328
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT6     0x020E032C
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_DAT7     0x020E0330
+#define IOMUXC_SW_MUX_CTL_PAD_SD3_RST      0x020E0334
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_CLK      0x020E0338
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_CMD      0x020E033C
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT0     0x020E0340
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT1     0x020E0344
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT2     0x020E0348
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT3     0x020E034C
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT4     0x020E0350
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT5     0x020E0354
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT6     0x020E0358
+#define IOMUXC_SW_MUX_CTL_PAD_SD4_DAT7     0x020E035C
+
+//
+// IOMUXC_SW_PAD_CTL_PAD_*
+// IOMUXC_SW_PAD_CTL_GRP_*
+//
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT10     0x020E0360
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT11     0x020E0364
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT12     0x020E0368
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT13     0x020E036C
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT14     0x020E0370
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT15     0x020E0374
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT16     0x020E0378
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT17     0x020E037C
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT18     0x020E0380
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT19     0x020E0384
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT4      0x020E0388
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT5      0x020E038C
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT6      0x020E0390
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT7      0x020E0394
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT8      0x020E0398
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DAT9      0x020E039C
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_DATA_EN   0x020E03A0
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_MCLK      0x020E03A4
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_PIXCLK    0x020E03A8
+#define IOMUXC_SW_PAD_CTL_PAD_CSI0_VSYNC     0x020E03AC
+#define IOMUXC_SW_PAD_CTL_PAD_DI0_DISP_CLK   0x020E03B0
+#define IOMUXC_SW_PAD_CTL_PAD_DI0_PIN15      0x020E03B4
+#define IOMUXC_SW_PAD_CTL_PAD_DI0_PIN2       0x020E03B8
+#define IOMUXC_SW_PAD_CTL_PAD_DI0_PIN3       0x020E03BC
+#define IOMUXC_SW_PAD_CTL_PAD_DI0_PIN4       0x020E03C0
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT0     0x020E03C4
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT1     0x020E03C8
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT10    0x020E03CC
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT11    0x020E03D0
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT12    0x020E03D4
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT13    0x020E03D8
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT14    0x020E03DC
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT15    0x020E03E0
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT16    0x020E03E4
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT17    0x020E03E8
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT18    0x020E03EC
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT19    0x020E03F0
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT2     0x020E03F4
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT20    0x020E03F8
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT21    0x020E03FC
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT22    0x020E0400
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT23    0x020E0404
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT3     0x020E0408
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT4     0x020E040C
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT5     0x020E0410
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT6     0x020E0414
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT7     0x020E0418
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT8     0x020E041C
+#define IOMUXC_SW_PAD_CTL_PAD_DISP0_DAT9     0x020E0420
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A0        0x020E0424
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A1        0x020E0428
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A10       0x020E042C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A11       0x020E0430
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A12       0x020E0434
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A13       0x020E0438
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A14       0x020E043C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A15       0x020E0440
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A2        0x020E0444
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A3        0x020E0448
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A4        0x020E044C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A5        0x020E0450
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A6        0x020E0454
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A7        0x020E0458
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A8        0x020E045C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_A9        0x020E0460
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS       0x020E0464
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0       0x020E0468
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1       0x020E046C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0      0x020E0470
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1      0x020E0474
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2      0x020E0478
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3      0x020E047C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4      0x020E0480
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5      0x020E0484
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6      0x020E0488
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7      0x020E048C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS       0x020E0490
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET     0x020E0494
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0     0x020E0498
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1     0x020E049C
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2     0x020E04A0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0    0x020E04A4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1    0x020E04A8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0   0x020E04AC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1   0x020E04B0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0    0x020E04B4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1    0x020E04B8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0     0x020E04BC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1     0x020E04C0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2     0x020E04C4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3     0x020E04C8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4     0x020E04CC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5     0x020E04D0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6     0x020E04D4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7     0x020E04D8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE      0x020E04DC
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A16        0x020E04E0
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A17        0x020E04E4
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A18        0x020E04E8
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A19        0x020E04EC
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A20        0x020E04F0
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A21        0x020E04F4
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A22        0x020E04F8
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A23        0x020E04FC
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A24        0x020E0500
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_A25        0x020E0504
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_BCLK       0x020E0508
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_CS0        0x020E050C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_CS1        0x020E0510
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D16        0x020E0514
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D17        0x020E0518
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D18        0x020E051C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D19        0x020E0520
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D20        0x020E0524
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D21        0x020E0528
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D22        0x020E052C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D23        0x020E0530
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D24        0x020E0534
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D25        0x020E0538
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D26        0x020E053C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D27        0x020E0540
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D28        0x020E0544
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D29        0x020E0548
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D30        0x020E054C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_D31        0x020E0550
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA0        0x020E0554
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA1        0x020E0558
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA10       0x020E055C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA11       0x020E0560
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA12       0x020E0564
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA13       0x020E0568
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA14       0x020E056C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA15       0x020E0570
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA2        0x020E0574
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA3        0x020E0578
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA4        0x020E057C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA5        0x020E0580
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA6        0x020E0584
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA7        0x020E0588
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA8        0x020E058C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_DA9        0x020E0590
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_EB0        0x020E0594
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_EB1        0x020E0598
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_EB2        0x020E059C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_EB3        0x020E05A0
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_LBA        0x020E05A4
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_OE         0x020E05A8
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_RW         0x020E05AC
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_WAIT       0x020E05B0
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV    0x020E05B4
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDC       0x020E05B8
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO      0x020E05BC
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK   0x020E05C0
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER     0x020E05C4
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0      0x020E05C8
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1      0x020E05CC
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN     0x020E05D0
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0      0x020E05D4
+#define IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1      0x020E05D8
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_0         0x020E05DC
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_1         0x020E05E0
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_16        0x020E05E4
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_17        0x020E05E8
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_18        0x020E05EC
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_19        0x020E05F0
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_2         0x020E05F4
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_3         0x020E05F8
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_4         0x020E05FC
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_5         0x020E0600
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_6         0x020E0604
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_7         0x020E0608
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_8         0x020E060C
+#define IOMUXC_SW_PAD_CTL_PAD_GPIO_9         0x020E0610
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD       0x020E0614
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK       0x020E0618
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI       0x020E061C
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO       0x020E0620
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS       0x020E0624
+#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TRSTB     0x020E0628
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_COL0       0x020E062C
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_COL1       0x020E0630
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_COL2       0x020E0634
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_COL3       0x020E0638
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_COL4       0x020E063C
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0       0x020E0640
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1       0x020E0644
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2       0x020E0648
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3       0x020E064C
+#define IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4       0x020E0650
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_ALE      0x020E0654
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_CLE      0x020E0658
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_CS0      0x020E065C
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_CS1      0x020E0660
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_CS2      0x020E0664
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_CS3      0x020E0668
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D0       0x020E066C
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D1       0x020E0670
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D2       0x020E0674
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D3       0x020E0678
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D4       0x020E067C
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D5       0x020E0680
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D6       0x020E0684
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_D7       0x020E0688
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_RB0      0x020E068C
+#define IOMUXC_SW_PAD_CTL_PAD_NANDF_WP_B     0x020E0690
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0      0x020E0694
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1      0x020E0698
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2      0x020E069C
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3      0x020E06A0
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL   0x020E06A4
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC      0x020E06A8
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0      0x020E06AC
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1      0x020E06B0
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2      0x020E06B4
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3      0x020E06B8
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL   0x020E06BC
+#define IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC      0x020E06C0
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_CLK        0x020E06C4
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_CMD        0x020E06C8
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_DAT0       0x020E06CC
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_DAT1       0x020E06D0
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_DAT2       0x020E06D4
+#define IOMUXC_SW_PAD_CTL_PAD_SD1_DAT3       0x020E06D8
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_CLK        0x020E06DC
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_CMD        0x020E06E0
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_DAT0       0x020E06E4
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_DAT1       0x020E06E8
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_DAT2       0x020E06EC
+#define IOMUXC_SW_PAD_CTL_PAD_SD2_DAT3       0x020E06F0
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_CLK        0x020E06F4
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_CMD        0x020E06F8
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT0       0x020E06FC
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT1       0x020E0700
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT2       0x020E0704
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT3       0x020E0708
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT4       0x020E070C
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT5       0x020E0710
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT6       0x020E0714
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_DAT7       0x020E0718
+#define IOMUXC_SW_PAD_CTL_PAD_SD3_RST        0x020E071C
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_CLK        0x020E0720
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_CMD        0x020E0724
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT0       0x020E0728
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT1       0x020E072C
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT2       0x020E0730
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT3       0x020E0734
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT4       0x020E0738
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT5       0x020E073C
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT6       0x020E0740
+#define IOMUXC_SW_PAD_CTL_PAD_SD4_DAT7       0x020E0744
+#define IOMUXC_SW_PAD_CTL_GRP_B7DS           0x020E0748
+#define IOMUXC_SW_PAD_CTL_GRP_ADDDS          0x020E074C
+#define IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL    0x020E0750
+#define IOMUXC_SW_PAD_CTL_GRP_DDRPKE         0x020E0754
+#define IOMUXC_SW_PAD_CTL_GRP_DDRPK          0x020E0758
+#define IOMUXC_SW_PAD_CTL_GRP_DDRHYS         0x020E075C
+#define IOMUXC_SW_PAD_CTL_GRP_DDRMODE        0x020E0760
+#define IOMUXC_SW_PAD_CTL_GRP_B0DS           0x020E0764
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII 0x020E0768
+#define IOMUXC_SW_PAD_CTL_GRP_CTLDS          0x020E076C
+#define IOMUXC_SW_PAD_CTL_GRP_B1DS           0x020E0770
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE       0x020E0774
+#define IOMUXC_SW_PAD_CTL_GRP_B2DS           0x020E0778
+#define IOMUXC_SW_PAD_CTL_GRP_B3DS           0x020E077C
+#define IOMUXC_SW_PAD_CTL_GRP_B4DS           0x020E0780
+#define IOMUXC_SW_PAD_CTL_GRP_B5DS           0x020E0784
+#define IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM     0x020E0788
+#define IOMUXC_SW_PAD_CTL_GRP_B6DS           0x020E078C
+
+//
+// IOMUXC_*_SELECT_INPUT
+//
+#define IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT             0x020E0790
+#define IOMUXC_ASRC_ASRCK_CLOCK_6_SELECT_INPUT            0x020E0794
+#define IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT        0x020E0798
+#define IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT        0x020E079C
+#define IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT     0x020E07A0
+#define IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT      0x020E07A4
+#define IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT     0x020E07A8
+#define IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT      0x020E07AC
+#define IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT        0x020E07B0
+#define IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT        0x020E07B4
+#define IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT     0x020E07B8
+#define IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT      0x020E07BC
+#define IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT     0x020E07C0
+#define IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT      0x020E07C4
+#define IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT            0x020E07C8
+#define IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT            0x020E07CC
+#define IOMUXC_CCM_IPP_DI1_CLK_SELECT_INPUT               0x020E07D0
+#define IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT     0x020E07D4
+#define IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT        0x020E07D8
+#define IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT           0x020E07DC
+#define IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT           0x020E07E0
+#define IOMUXC_ECSPI1_IPP_IND_SS_B_0_SELECT_INPUT         0x020E07E4
+#define IOMUXC_ECSPI1_IPP_IND_SS_B_1_SELECT_INPUT         0x020E07E8
+#define IOMUXC_ECSPI1_IPP_IND_SS_B_2_SELECT_INPUT         0x020E07EC
+#define IOMUXC_ECSPI1_IPP_IND_SS_B_3_SELECT_INPUT         0x020E07F0
+#define IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT        0x020E07F4
+#define IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT           0x020E07F8
+#define IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT           0x020E07FC
+#define IOMUXC_ECSPI2_IPP_IND_SS_B_0_SELECT_INPUT         0x020E0800
+#define IOMUXC_ECSPI2_IPP_IND_SS_B_1_SELECT_INPUT         0x020E0804
+#define IOMUXC_ECSPI4_IPP_IND_SS_B_0_SELECT_INPUT         0x020E0808
+#define IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT             0x020E080C
+#define IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT        0x020E0810
+#define IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT       0x020E0814
+#define IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT    0x020E0818
+#define IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT    0x020E081C
+#define IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT    0x020E0820
+#define IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT    0x020E0824
+#define IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT        0x020E0828
+#define IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT              0x020E082C
+#define IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT              0x020E0830
+#define IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT             0x020E0834
+#define IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT             0x020E0838
+#define IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT             0x020E083C
+#define IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT             0x020E0840
+#define IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT             0x020E0844
+#define IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT             0x020E0848
+#define IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT        0x020E084C
+#define IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT        0x020E0850
+#define IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT        0x020E0854
+#define IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT        0x020E0858
+#define IOMUXC_HDMI_TX_ICECIN_SELECT_INPUT                0x020E085C
+#define IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SCLIN_SELECT_INPUT 0x020E0860
+#define IOMUXC_HDMI_TX_II2C_MSTH13TDDC_SDAIN_SELECT_INPUT 0x020E0864
+#define IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT               0x020E0868
+#define IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT               0x020E086C
+#define IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT               0x020E0870
+#define IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT               0x020E0874
+#define IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT               0x020E0878
+#define IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT               0x020E087C
+#define IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT               0x020E0880
+#define IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT               0x020E0884
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_10_SELECT_INPUT    0x020E0888
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_11_SELECT_INPUT    0x020E088C
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_12_SELECT_INPUT    0x020E0890
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_13_SELECT_INPUT    0x020E0894
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_14_SELECT_INPUT    0x020E0898
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_15_SELECT_INPUT    0x020E089C
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_16_SELECT_INPUT    0x020E08A0
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_17_SELECT_INPUT    0x020E08A4
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_18_SELECT_INPUT    0x020E08A8
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_19_SELECT_INPUT    0x020E08AC
+#define IOMUXC_IPU1_IPP_IND_SENS1_DATA_EN_SELECT_INPUT    0x020E08B0
+#define IOMUXC_IPU1_IPP_IND_SENS1_HSYNC_SELECT_INPUT      0x020E08B4
+#define IOMUXC_IPU1_IPP_IND_SENS1_PIX_CLK_SELECT_INPUT    0x020E08B8
+#define IOMUXC_IPU1_IPP_IND_SENS1_VSYNC_SELECT_INPUT      0x020E08BC
+#define IOMUXC_KPP_IPP_IND_COL_5_SELECT_INPUT             0x020E08C0
+#define IOMUXC_KPP_IPP_IND_COL_6_SELECT_INPUT             0x020E08C4
+#define IOMUXC_KPP_IPP_IND_COL_7_SELECT_INPUT             0x020E08C8
+#define IOMUXC_KPP_IPP_IND_ROW_5_SELECT_INPUT             0x020E08CC
+#define IOMUXC_KPP_IPP_IND_ROW_6_SELECT_INPUT             0x020E08D0
+#define IOMUXC_KPP_IPP_IND_ROW_7_SELECT_INPUT             0x020E08D4
+#define IOMUXC_LCDIF_LCDIF_BUSY_SELECT_INPUT              0x020E08D8
+#define IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT                0x020E08DC
+#define IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT               0x020E08E0
+#define IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT                0x020E08E4
+#define IOMUXC_SDMA_EVENTS_14_SELECT_INPUT                0x020E08E8
+#define IOMUXC_SDMA_EVENTS_15_SELECT_INPUT                0x020E08EC
+#define IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT               0x020E08F0
+#define IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT                 0x020E08F4
+#define IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT          0x020E08F8
+#define IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT        0x020E08FC
+#define IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT          0x020E0900
+#define IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT        0x020E0904
+#define IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT          0x020E0908
+#define IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT        0x020E090C
+#define IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT          0x020E0910
+#define IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT        0x020E0914
+#define IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT          0x020E0918
+#define IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT        0x020E091C
+#define IOMUXC_USBOH3_IPP_IND_OTG_OC_SELECT_INPUT         0x020E0920
+#define IOMUXC_USBOH3_IPP_IND_UH1_OC_SELECT_INPUT         0x020E0924
+#define IOMUXC_USDHC1_IPP_CARD_CLK_IN_SELECT_INPUT        0x020E0928
+#define IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT              0x020E092C
+#define IOMUXC_USDHC2_IPP_CARD_CLK_IN_SELECT_INPUT        0x020E0930
+#define IOMUXC_USDHC3_IPP_CARD_CLK_IN_SELECT_INPUT        0x020E0934
+#define IOMUXC_USDHC4_IPP_CARD_CLK_IN_SELECT_INPUT        0x020E0938
+
+#endif // _IOMUX_REGISTER_H_
+/*
+ * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved.
+ * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
+ * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
+ * Freescale Semiconductor, Inc.
+*/
+
+// File: enet_iomux_config.c
+
+
+// Function to config iomux for instance enet.
+static void enet_iomux_config(void)
+{
+    // Config enet.MDC to pad ENET_MDC(V20)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_MDC(0x020E01E8)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_MDC.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 6 iomux modes to be used for pad: ENET_MDC.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: MLBDAT of instance: mlb.
+    //                NOTE: - Config IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT for mode ALT0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: MDC of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: TX5_RX0 of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT for mode ALT2.
+    //     ALT4 (4) - Select mux mode: ALT4 mux port: 1588_EVENT1_IN of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[31] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_MDC);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_MDC(0x020E05B8)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_MDC.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_MDC.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_MDC.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_MDC.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_MDC.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_MDC.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_MDC.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_MDC.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_MDC);
+
+    // Config enet.MDIO to pad ENET_MDIO(V23)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO(0x020E01EC)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_MDIO.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 6 iomux modes to be used for pad: ENET_MDIO.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: MDIO of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT for mode ALT1.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: SCKR of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT for mode ALT2.
+    //     ALT4 (4) - Select mux mode: ALT4 mux port: 1588_EVENT1_OUT of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio1.
+    //     ALT6 (6) - Select mux mode: ALT6 mux port: PLOCK of instance: spdif.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO);
+    // Pad ENET_MDIO is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT(0x020E0810)
+    //   DAISY (0) Reset: SEL_ENET_MDIO_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_mdio
+    //     SEL_ENET_MDIO_ALT1 (0) - Selecting Pad: ENET_MDIO for Mode: ALT1.
+    //     SEL_KEY_COL1_ALT1 (1) - Selecting Pad: KEY_COL1 for Mode: ALT1.
+    writel((SEL_ENET_MDIO_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_MDIO_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO(0x020E05BC)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_MDIO.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_MDIO.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_MDIO.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_MDIO.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_MDIO.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_MDIO.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_MDIO.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_MDIO.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO);
+
+    // Config enet.RDATA[0] to pad ENET_RXD0(W21)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0(0x020E01F8)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_RXD0.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 7 iomux modes to be used for pad: ENET_RXD0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RDATA[0] of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for mode ALT1.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: HCKT of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT for mode ALT2.
+    //     ALT3 (3) - Select mux mode: ALT3 mux port: OUT1 of instance: spdif.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_RXD0);
+    // Pad ENET_RXD0 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT(0x020E0818)
+    //   DAISY (0) Reset: SEL_ENET_RXD0_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[0]
+    //     SEL_ENET_RXD0_ALT1 (0) - Selecting Pad: ENET_RXD0 for Mode: ALT1.
+    //     SEL_RGMII_RD0_ALT1 (1) - Selecting Pad: RGMII_RD0 for Mode: ALT1.
+    writel((SEL_ENET_RXD0_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0(0x020E05C8)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_RXD0.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_RXD0.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_RXD0.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_RXD0.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_RXD0.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Read Only Field
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_RXD0.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_RXD0.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_RXD0);
+
+    // Config enet.RDATA[1] to pad ENET_RXD1(W22)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1(0x020E01FC)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_RXD1.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 7 iomux modes to be used for pad: ENET_RXD1.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: MLBSIG of instance: mlb.
+    //                NOTE: - Config IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT for mode ALT0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RDATA[1] of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for mode ALT1.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: FST of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT for mode ALT2.
+    //     ALT4 (4) - Select mux mode: ALT4 mux port: 1588_EVENT3_OUT of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_RXD1);
+    // Pad ENET_RXD1 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT(0x020E081C)
+    //   DAISY (0) Reset: SEL_ENET_RXD1_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[1]
+    //     SEL_ENET_RXD1_ALT1 (0) - Selecting Pad: ENET_RXD1 for Mode: ALT1.
+    //     SEL_RGMII_RD1_ALT1 (1) - Selecting Pad: RGMII_RD1 for Mode: ALT1.
+    writel((SEL_ENET_RXD1_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1(0x020E05CC)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_RXD1.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_RXD1.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_RXD1.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_RXD1.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_RXD1.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_RXD1.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_RXD1.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_RXD1.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_RXD1);
+
+    // Config enet.RGMII_RD0 to pad RGMII_RD0(C24)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0(0x020E02AC)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RD0.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_RD0.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: RX_READY of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RD0 of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RD0);
+    // Pad RGMII_RD0 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT(0x020E0818)
+    //   DAISY (0) Reset: SEL_ENET_RXD0_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[0]
+    //     SEL_ENET_RXD0_ALT1 (0) - Selecting Pad: ENET_RXD0 for Mode: ALT1.
+    //     SEL_RGMII_RD0_ALT1 (1) - Selecting Pad: RGMII_RD0 for Mode: ALT1.
+    writel((SEL_ENET_RXD0_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_0_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0(0x020E0694)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RD0.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RD0.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_RD0.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RD0.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RD0.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RD0.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RD0);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_RD1 to pad RGMII_RD1(B23)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1(0x020E02B0)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RD1.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 5 iomux modes to be used for pad: RGMII_RD1.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: TX_FLAG of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RD1 of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[27] of instance: gpio6.
+    //     ALT7 (7) - Select mux mode: ALT7 mux port: FAIL of instance: sjc.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RD1);
+    // Pad RGMII_RD1 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT(0x020E081C)
+    //   DAISY (0) Reset: SEL_ENET_RXD1_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[1]
+    //     SEL_ENET_RXD1_ALT1 (0) - Selecting Pad: ENET_RXD1 for Mode: ALT1.
+    //     SEL_RGMII_RD1_ALT1 (1) - Selecting Pad: RGMII_RD1 for Mode: ALT1.
+    writel((SEL_ENET_RXD1_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_1_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1(0x020E0698)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RD1.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RD1.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_RD1.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RD1.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RD1.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RD1.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RD1);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_RD2 to pad RGMII_RD2(B24)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2(0x020E02B4)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RD2.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_RD2.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: TX_DATA of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RD2 of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RD2);
+    // Pad RGMII_RD2 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT(0x020E0820)
+    //   DAISY (0) Reset: SEL_KEY_COL2_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[2]
+    //     SEL_KEY_COL2_ALT1 (0) - Selecting Pad: KEY_COL2 for Mode: ALT1.
+    //     SEL_RGMII_RD2_ALT1 (1) - Selecting Pad: RGMII_RD2 for Mode: ALT1.
+    writel((SEL_KEY_COL2_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_2_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2(0x020E069C)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RD2.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RD2.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_RD2.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RD2.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RD2.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RD2.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RD2);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_RD3 to pad RGMII_RD3(D23)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3(0x020E02B8)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RD3.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_RD3.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: TX_WAKE of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RD3 of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RD3);
+    // Pad RGMII_RD3 is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT(0x020E0824)
+    //   DAISY (0) Reset: SEL_KEY_COL0_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxdata[3]
+    //     SEL_KEY_COL0_ALT1 (0) - Selecting Pad: KEY_COL0 for Mode: ALT1.
+    //     SEL_RGMII_RD3_ALT1 (1) - Selecting Pad: RGMII_RD3 for Mode: ALT1.
+    writel((SEL_KEY_COL0_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXDATA_3_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3(0x020E06A0)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RD3.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RD3.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_RD3.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RD3.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RD3.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RD3.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RD3);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_RX_CTL to pad RGMII_RX_CTL(D22)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL(0x020E02BC)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RX_CTL.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_RX_CTL.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: H3_DATA of instance: usboh3.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RX_CTL of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RX_CTL);
+    // Pad RGMII_RX_CTL is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT(0x020E0828)
+    //   DAISY (0) Reset: SEL_ENET_CRS_DV_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxen
+    //     SEL_ENET_CRS_DV_ALT1 (0) - Selecting Pad: ENET_CRS_DV for Mode: ALT1.
+    //     SEL_RGMII_RX_CTL_ALT1 (1) - Selecting Pad: RGMII_RX_CTL for Mode: ALT1.
+    writel((SEL_ENET_CRS_DV_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL(0x020E06A4)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RX_CTL.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RX_CTL.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PD
+    //                 Select one out of next values for pad: RGMII_RX_CTL.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RX_CTL.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RX_CTL.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RX_CTL.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PD & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RX_CTL);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_RXC to pad RGMII_RXC(B25)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC(0x020E02C0)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_RXC.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_RXC.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: H3_STROBE of instance: usboh3.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_RXC of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT for mode ALT1.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_RXC);
+    // Pad RGMII_RXC is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT(0x020E0814)
+    //   DAISY (0) Reset: SEL_GPIO_18_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxclk
+    //     SEL_GPIO_18_ALT1 (0) - Selecting Pad: GPIO_18 for Mode: ALT1.
+    //     SEL_RGMII_RXC_ALT1 (1) - Selecting Pad: RGMII_RXC for Mode: ALT1.
+    writel((SEL_GPIO_18_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXCLK_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC(0x020E06A8)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_RXC.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_RXC.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PD
+    //                 Select one out of next values for pad: RGMII_RXC.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_RXC.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_RXC.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //                NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_RXC.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PD & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_RXC);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM(0x020E0788)
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Select one out of next values for group: RGMII_TERM (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                RGMII_RX_CTL).
+    //     ODT_OFF (0) - Off
+    //     ODT_120OHM (1) - 120 Ohm ODT
+    //     ODT_60OHM (2) - 60 Ohm ODT
+    //     ODT_40OHM (3) - 40 Ohm ODT
+    //     ODT_30OHM (4) - 30 Ohm ODT
+    //     ODT_RES5 (5) - Reserved
+    //     ODT_20OHM (6) - 20 Ohm ODT
+    //     ODT_RES7 (7) - Reserved
+    writel((ODT_OFF & 0x7) << 8, IOMUXC_SW_PAD_CTL_GRP_RGMII_TERM);
+
+    // Config enet.RGMII_TD0 to pad RGMII_TD0(C22)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0(0x020E02C4)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TD0.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_TD0.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: TX_READY of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TD0 of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[20] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TD0);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0(0x020E06AC)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_TD0.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TD0.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_TD0.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TD0.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TD0.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TD0.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TD0);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RGMII_TD1 to pad RGMII_TD1(F20)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1(0x020E02C8)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TD1.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 5 iomux modes to be used for pad: RGMII_TD1.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: RX_FLAG of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TD1 of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[21] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TD1);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1(0x020E06B0)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_TD1.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TD1.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_TD1.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TD1.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TD1.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TD1.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TD1);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RGMII_TD2 to pad RGMII_TD2(E21)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2(0x020E02CC)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TD2.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 5 iomux modes to be used for pad: RGMII_TD2.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: RX_DATA of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TD2 of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[22] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TD2);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2(0x020E06B4)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_TD2.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TD2.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_TD2.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TD2.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TD2.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TD2.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TD2);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RGMII_TD3 to pad RGMII_TD3(A24)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3(0x020E02D0)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TD3.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: RGMII_TD3.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: RX_WAKE of instance: mipi_hsi_ctrl.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TD3 of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TD3);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3(0x020E06B8)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Select one out of next values for pad: RGMII_TD3.
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //     DDR_INPUT_DIFF (1) - Differential input mode
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TD3.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: RGMII_TD3.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TD3.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TD3.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TD3.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TD3);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RGMII_TX_CTL to pad RGMII_TX_CTL(C23)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL(0x020E02D4)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TX_CTL.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 5 iomux modes to be used for pad: RGMII_TX_CTL.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: H2_STROBE of instance: usboh3.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TX_CTL of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[26] of instance: gpio6.
+    //     ALT7 (7) - Select mux mode: ALT7 mux port: ANATOP_ETHERNET_REF_OUT of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT for mode ALT7.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TX_CTL);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL(0x020E06BC)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Read Only Field
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TX_CTL.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PD
+    //                 Select one out of next values for pad: RGMII_TX_CTL.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TX_CTL.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TX_CTL.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TX_CTL.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PD & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TX_CTL);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RGMII_TXC to pad RGMII_TXC(D21)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC(0x020E02D8)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad RGMII_TXC.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 6 iomux modes to be used for pad: RGMII_TXC.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: H2_DATA of instance: usboh3.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RGMII_TXC of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: SPDIF_EXTCLK of instance: spdif.
+    //                NOTE: - Config IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT2.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[19] of instance: gpio6.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_RGMII_TXC);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC(0x020E06C0)
+    //   DO_TRIM (21-20) - DO Trim Field Reset: DO_TRIM_RES0
+    //                     Read Only Field
+    //     DO_TRIM_RES0 (0) - Reserved
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR1_DDR3_DDR2_ODT
+    //                     Read Only Field
+    //                     NOTE: Can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //   DDR_INPUT (17) - DDR / CMOS Input Mode Field Reset: DDR_INPUT_CMOS
+    //                    Read Only Field
+    //     DDR_INPUT_CMOS (0) - CMOS input type
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: RGMII_TXC.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PD
+    //                 Select one out of next values for pad: RGMII_TXC.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: RGMII_TXC.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: RGMII_TXC.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODT (10-8) - On Die Termination Field Reset: ODT_OFF
+    //                Read Only Field
+    //     ODT_OFF (0) - Off
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: RGMII_TXC.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    writel((DO_TRIM_RES0 & 0x3) << 20 | (DDR_SEL_LPDDR1_DDR3_DDR2_ODT & 0x3) << 18 | (DDR_INPUT_CMOS & 0x1) << 17 |
+           (HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PD & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODT_OFF & 0x7) << 8 | (DSE_40OHM & 0x7) << 3, IOMUXC_SW_PAD_CTL_PAD_RGMII_TXC);
+    // Pad Group Control Register:
+    // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII(0x020E0768)
+    //   DDR_SEL (19-18) - DDR Select Field Reset: DDR_SEL_LPDDR2
+    //                     Select one out of next values for group: DDR_TYPE_RGMII (Pads: RGMII_RD0 RGMII_RD1 RGMII_RD2 RGMII_RD3 RGMII_RXC
+    //                     RGMII_RX_CTL RGMII_TD0 RGMII_TD1 RGMII_TD2 RGMII_TD3 RGMII_TXC RGMII_TX_CTL).
+    //     DDR_SEL_LPDDR1_DDR3_DDR2_ODT (0) - LPDDR1 / DDR3 / (DDR2 ODT) modes
+    //     DDR_SEL_DDR2 (1) - DDR2 driver mode
+    //     DDR_SEL_LPDDR2 (2) - LPDDR2 mode
+    //     DDR_SEL_RES0 (3) - Reserved
+    writel((DDR_SEL_LPDDR2 & 0x3) << 18, IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_RGMII);
+
+    // Config enet.RX_EN to pad ENET_CRS_DV(U21)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV(0x020E01E4)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_CRS_DV.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 6 iomux modes to be used for pad: ENET_CRS_DV.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RX_EN of instance: enet.
+    //                NOTE: - Config IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT for mode ALT1.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: SCKT of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT for mode ALT2.
+    //     ALT3 (3) - Select mux mode: ALT3 mux port: SPDIF_EXTCLK of instance: spdif.
+    //                NOTE: - Config IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT for mode ALT3.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[25] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_CRS_DV);
+    // Pad ENET_CRS_DV is involved in Daisy Chain.
+    // Input Select Register:
+    // IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT(0x020E0828)
+    //   DAISY (0) Reset: SEL_ENET_CRS_DV_ALT1
+    //               Selecting Pads Involved in Daisy Chain.
+    //               NOTE: Instance: enet,   In Pin: ipp_ind_mac0_rxen
+    //     SEL_ENET_CRS_DV_ALT1 (0) - Selecting Pad: ENET_CRS_DV for Mode: ALT1.
+    //     SEL_RGMII_RX_CTL_ALT1 (1) - Selecting Pad: RGMII_RX_CTL for Mode: ALT1.
+    writel((SEL_ENET_CRS_DV_ALT1 & 0x1), IOMUXC_ENET_IPP_IND_MAC0_RXEN_SELECT_INPUT);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV(0x020E05B4)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_CRS_DV.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_CRS_DV.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_CRS_DV.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_CRS_DV.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_CRS_DV.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Read Only Field
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_CRS_DV.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_CRS_DV.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_CRS_DV);
+
+    // Config enet.RX_ER to pad ENET_RX_ER(W23)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER(0x020E01F4)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_RX_ER.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 8 iomux modes to be used for pad: ENET_RX_ER.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: USBOTG_ID of instance: anatop.
+    //                NOTE: - Config IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT for mode ALT0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: RX_ER of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: HCKR of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT for mode ALT2.
+    //     ALT3 (3) - Select mux mode: ALT3 mux port: IN1 of instance: spdif.
+    //                NOTE: - Config IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT for mode ALT3.
+    //     ALT4 (4) - Select mux mode: ALT4 mux port: 1588_EVENT2_OUT of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[24] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_RX_ER);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER(0x020E05C4)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_RX_ER.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_RX_ER.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_RX_ER.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_RX_ER.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_RX_ER.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_RX_ER.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_RX_ER.
+    //               NOTE: 000 output driver disabled;
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_RX_ER.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_RX_ER);
+
+    // Config enet.TDATA[0] to pad ENET_TXD0(U20)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0(0x020E0204)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_TXD0.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 4 iomux modes to be used for pad: ENET_TXD0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: TDATA[0] of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: TX4_RX1 of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT for mode ALT2.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[30] of instance: gpio1.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_TXD0);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0(0x020E05D4)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_TXD0.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_TXD0.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_TXD0.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_TXD0.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_TXD0.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_TXD0.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_TXD0.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_TXD0.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_TXD0);
+
+    // Config enet.TDATA[1] to pad ENET_TXD1(W20)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1(0x020E0208)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_TXD1.
+    //   MUX_MODE (3-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 7 iomux modes to be used for pad: ENET_TXD1.
+    //     ALT0 (0) - Select mux mode: ALT0 mux port: MLBCLK of instance: mlb.
+    //                NOTE: - Config IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT for mode ALT0.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: TDATA[1] of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: TX2_RX3 of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT for mode ALT2.
+    //     ALT4 (4) - Select mux mode: ALT4 mux port: 1588_EVENT0_IN of instance: enet.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[29] of instance: gpio1.
+    //     ALT9 (9) - Select mux mode: ALT9 mux port: SDA of instance: i2c4.
+    //                NOTE: - Config IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT for mode ALT9.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0xF), IOMUXC_SW_MUX_CTL_PAD_ENET_TXD1);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1(0x020E05D8)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_TXD1.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_TXD1.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_TXD1.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_TXD1.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_TXD1.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_TXD1.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_TXD1.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_TXD1.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_TXD1);
+
+    // Config enet.TX_CLK to pad ENET_REF_CLK(V22)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK(0x020E01F0)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_REF_CLK.
+    //   MUX_MODE (2-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 6 iomux modes to be used for pad: ENET_REF_CLK.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: TX_CLK of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: FSR of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT for mode ALT2.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[23] of instance: gpio1.
+    //     ALT6 (6) - Select mux mode: ALT6 mux port: SRCLK of instance: spdif.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0x7), IOMUXC_SW_MUX_CTL_PAD_ENET_REF_CLK);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK(0x020E05C0)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_REF_CLK.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_REF_CLK.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_REF_CLK.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_REF_CLK.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_REF_CLK.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_REF_CLK.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_REF_CLK.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_REF_CLK.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_REF_CLK);
+
+    // Config enet.TX_EN to pad ENET_TX_EN(V21)
+    // Mux Register:
+    // IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN(0x020E0200)
+    //   SION (4) - Software Input On Field Reset: SION_DISABLED
+    //              Force the selected mux mode Input path no matter of MUX_MODE functionality.
+    //     SION_DISABLED (0) - Input Path is determined by functionality of the selected mux mode (regular).
+    //     SION_ENABLED (1) - Force input path of pad ENET_TX_EN.
+    //   MUX_MODE (3-0) - MUX Mode Select Field Reset: ALT5
+    //                    Select 1 of 5 iomux modes to be used for pad: ENET_TX_EN.
+    //     ALT1 (1) - Select mux mode: ALT1 mux port: TX_EN of instance: enet.
+    //     ALT2 (2) - Select mux mode: ALT2 mux port: TX3_RX2 of instance: esai.
+    //                NOTE: - Config IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT for mode ALT2.
+    //     ALT5 (5) - Select mux mode: ALT5 mux port: GPIO[28] of instance: gpio1.
+    //     ALT9 (9) - Select mux mode: ALT9 mux port: SCL of instance: i2c4.
+    //                NOTE: - Config IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT for mode ALT9.
+    writel((SION_DISABLED & 0x1) << 4 | (ALT1 & 0xF), IOMUXC_SW_MUX_CTL_PAD_ENET_TX_EN);
+    // Pad Control Register:
+    // IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN(0x020E05D0)
+    //   HYS (16) - Hysteresis Enable Field Reset: HYS_ENABLED
+    //              Select one out of next values for pad: ENET_TX_EN.
+    //     HYS_DISABLED (0) - Hysteresis Disabled
+    //     HYS_ENABLED (1) - Hysteresis Enabled
+    //   PUS (15-14) - Pull Up / Down Config. Field Reset: PUS_100KOHM_PU
+    //                 Select one out of next values for pad: ENET_TX_EN.
+    //     PUS_100KOHM_PD (0) - 100K Ohm Pull Down
+    //     PUS_47KOHM_PU (1) - 47K Ohm Pull Up
+    //     PUS_100KOHM_PU (2) - 100K Ohm Pull Up
+    //     PUS_22KOHM_PU (3) - 22K Ohm Pull Up
+    //   PUE (13) - Pull / Keep Select Field Reset: PUE_PULL
+    //              Select one out of next values for pad: ENET_TX_EN.
+    //     PUE_KEEP (0) - Keeper
+    //     PUE_PULL (1) - Pull
+    //   PKE (12) - Pull / Keep Enable Field Reset: PKE_ENABLED
+    //              Select one out of next values for pad: ENET_TX_EN.
+    //     PKE_DISABLED (0) - Pull/Keeper Disabled
+    //     PKE_ENABLED (1) - Pull/Keeper Enabled
+    //   ODE (11) - Open Drain Enable Field Reset: ODE_DISABLED
+    //              Select one out of next values for pad: ENET_TX_EN.
+    //     ODE_DISABLED (0) - Open Drain Disabled
+    //     ODE_ENABLED (1) - Open Drain Enabled
+    //   SPEED (7-6) - Speed Field Reset: SPD_100MHZ
+    //                 Select one out of next values for pad: ENET_TX_EN.
+    //     SPD_TBD (0) - TBD
+    //     SPD_50MHZ (1) - Low(50 MHz)
+    //     SPD_100MHZ (2) - Medium(100 MHz)
+    //     SPD_200MHZ (3) - Maximum(200 MHz)
+    //   DSE (5-3) - Drive Strength Field Reset: DSE_40OHM
+    //               Select one out of next values for pad: ENET_TX_EN.
+    //     DSE_DISABLED (0) - Output driver disabled.
+    //     DSE_240OHM (1) - 240 Ohm
+    //     DSE_120OHM (2) - 120 Ohm
+    //     DSE_80OHM (3) - 80 Ohm
+    //     DSE_60OHM (4) - 60 Ohm
+    //     DSE_48OHM (5) - 48 Ohm
+    //     DSE_40OHM (6) - 40 Ohm
+    //     DSE_34OHM (7) - 34 Ohm
+    //   SRE (0) - Slew Rate Field Reset: SRE_SLOW
+    //             Select one out of next values for pad: ENET_TX_EN.
+    //     SRE_SLOW (0) - Slow Slew Rate
+    //     SRE_FAST (1) - Fast Slew Rate
+    writel((HYS_ENABLED & 0x1) << 16 | (PUS_100KOHM_PU & 0x3) << 14 | (PUE_PULL & 0x1) << 13 |
+           (PKE_ENABLED & 0x1) << 12 | (ODE_DISABLED & 0x1) << 11 | (SPD_100MHZ & 0x3) << 6 |
+           (DSE_40OHM & 0x7) << 3 | (SRE_SLOW & 0x1), IOMUXC_SW_PAD_CTL_PAD_ENET_TX_EN);
+}
+/*
+ * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved.
+ * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
+ * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
+ * Freescale Semiconductor, Inc.
+*/
+
+/*
+ * Copyright (C) 2012, Freescale Semiconductor, Inc. All Rights Reserved.
+ * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
+ * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
+ * Freescale Semiconductor, Inc.
+*/
+
+// Function to configure iomux for i.MX6SDL board Trizeps_VII_Solo_DualLite V1R2.
+void trizeps7sdl_IomuxConfig(void)
+{
+    enet_iomux_config();
+}
+#if 0
+// Definitions for unused modules.
+void anatop_iomux_config()
+{
+};
+
+void caam_wrapper_iomux_config()
+{
+};
+
+void ccm_iomux_config()
+{
+};
+
+void csu_iomux_config()
+{
+};
+
+void dcic1_iomux_config()
+{
+};
+
+void dcic2_iomux_config()
+{
+};
+
+void ecspi1_iomux_config()
+{
+};
+
+void ecspi2_iomux_config()
+{
+};
+
+void ecspi3_iomux_config()
+{
+};
+
+void ecspi4_iomux_config()
+{
+};
+
+void epdc_iomux_config()
+{
+};
+
+void epit1_iomux_config()
+{
+};
+
+void epit2_iomux_config()
+{
+};
+
+void esai_iomux_config()
+{
+};
+
+void gpio3_iomux_config()
+{
+};
+
+void gpt_iomux_config()
+{
+};
+
+void i2c3_iomux_config()
+{
+};
+
+void i2c4_iomux_config()
+{
+};
+
+void kpp_iomux_config()
+{
+};
+
+void lcdif_iomux_config()
+{
+};
+
+void ldb_iomux_config()
+{
+};
+
+void mipi_core_iomux_config()
+{
+};
+
+void mipi_hsi_ctrl_iomux_config()
+{
+};
+
+void mmdc_iomux_config()
+{
+};
+
+void pcie_ctrl_iomux_config()
+{
+};
+
+void pwm3_iomux_config()
+{
+};
+
+void pwm4_iomux_config()
+{
+};
+
+void rawnand_iomux_config()
+{
+};
+
+void sdma_iomux_config()
+{
+};
+
+void simba_iomux_config()
+{
+};
+
+void sjc_iomux_config()
+{
+};
+
+void snvs_hp_wrapper_iomux_config()
+{
+};
+
+void snvs_lp_wrapper_iomux_config()
+{
+};
+
+void spdif_iomux_config()
+{
+};
+
+void src_iomux_config()
+{
+};
+
+void tcu_iomux_config()
+{
+};
+
+void uart3_iomux_config()
+{
+};
+
+void uart5_iomux_config()
+{
+};
+
+void usboh3_iomux_config()
+{
+};
+
+void usdhc3_iomux_config()
+{
+};
+
+void wdog1_iomux_config()
+{
+};
+
+void wdog2_iomux_config()
+{
+};
+#endif
